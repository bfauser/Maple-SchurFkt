{VERSION 6 0 "IBM INTEL NT" "6.0" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 1 255 0 0 1 0 1 0 0 
1 0 0 0 0 1 }{CSTYLE "2D Math" -1 2 "Times" 0 1 0 0 0 0 0 0 2 0 0 0 0 
0 0 1 }{CSTYLE "Hyperlink" -1 17 "" 0 1 0 128 128 1 0 0 1 0 0 0 0 0 0 
1 }{CSTYLE "2D Output" 2 20 "" 0 1 0 0 255 1 0 0 0 0 0 0 0 0 0 1 }
{CSTYLE "" -1 256 "" 1 12 0 0 0 0 0 2 0 0 0 0 0 0 0 1 }{CSTYLE "" -1 
257 "" 1 12 0 0 0 0 0 2 0 0 0 0 0 0 0 1 }{CSTYLE "" -1 258 "" 1 14 0 
0 0 0 0 1 0 0 0 0 0 0 0 1 }{CSTYLE "" -1 259 "" 0 8 0 0 0 0 0 2 0 0 0 
0 0 0 0 1 }{CSTYLE "" -1 260 "" 0 1 0 0 0 0 0 2 0 0 0 0 0 0 0 1 }
{CSTYLE "" -1 261 "" 1 12 0 0 0 0 0 2 0 0 0 0 0 0 0 1 }{CSTYLE "" -1 
262 "" 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 }{CSTYLE "" -1 263 "" 0 1 0 0 
0 0 0 2 0 0 0 0 0 0 0 1 }{CSTYLE "_cstyle67" -1 264 "Courier" 1 12 
255 0 0 1 0 1 0 2 1 2 0 0 0 1 }{CSTYLE "" -1 265 "" 0 1 0 0 0 0 0 2 0 
0 0 0 0 0 0 0 }{CSTYLE "" -1 266 "" 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 }
{PSTYLE "Normal" -1 0 1 {CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 2 2 2 2 
2 2 1 1 1 1 }1 1 0 0 0 0 1 0 1 0 2 2 0 1 }{PSTYLE "Heading 2" -1 4 1 
{CSTYLE "" -1 -1 "Times" 1 14 0 0 0 1 2 1 2 2 2 2 1 1 1 1 }1 1 0 0 4 
4 1 0 1 0 2 2 0 1 }{PSTYLE "Text Output" -1 6 1 {CSTYLE "" -1 -1 "Cour
ier" 1 10 0 0 255 1 2 2 2 2 2 1 2 1 3 1 }1 1 0 0 0 0 1 0 1 0 2 2 0 1 }
{PSTYLE "Maple Output" -1 11 1 {CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 
2 2 2 2 2 2 1 1 1 1 }3 3 0 0 0 0 1 0 1 0 2 2 0 1 }{PSTYLE "Bullet Item
" -1 15 1 {CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 2 2 2 2 2 2 1 1 1 1 }
1 1 0 0 3 3 1 0 1 0 2 2 15 2 }{PSTYLE "_pstyle135" -1 256 1 {CSTYLE "
" -1 -1 "Courier" 1 12 255 0 0 1 2 1 2 2 1 2 1 1 1 1 }1 1 0 0 0 0 2 0 
2 0 2 2 0 1 }}
{SECT 0 {SECT 0 {PARA 4 "" 0 "" {TEXT -1 10 "Function: " }{TEXT 256 
52 "SchurFkt[FLAT] - flattens the function T() used by  " }{HYPERLNK 
17 "SchurFkt[MLIN]" 2 "SchurFkt,MLIN" "" }{TEXT 261 43 "  (hence T() i
s made associative this way)." }}{PARA 4 "" 0 "" {TEXT -1 17 "Calling \+
Sequence:" }}{PARA 4 "" 0 "" {TEXT 257 20 "out := FLAT(foo)  \n\n" }
{TEXT -1 11 "Parameters:" }}{PARA 15 "" 0 "" {TEXT -1 84 "<foo> an exp
ression containing nested (unnested or none) calls of the operator T()
. " }}{PARA 4 "" 0 "" {TEXT -1 7 "Output:" }}{PARA 15 "" 0 "" {TEXT 
-1 154 "out  :  the expression <foo> where the internal nested appeara
nces of T() have been deleted and the arguments passed over to the out
er most T(args) call. " }}{PARA 4 "" 0 "" {TEXT -1 8 "WARNING:" }}
{PARA 0 "" 0 "" {TEXT -1 64 "This is an experimental function for inte
rnal use mainly. It is " }{TEXT 262 3 "not" }{TEXT -1 68 " a general d
evice to implement associativity! FLAT calls internally " }{HYPERLNK 
17 "MLIN" 2 "SchurFkt,MLIN" "" }{TEXT -1 88 " and hence is affected by
 multilinearity and refers to a ground field (here integers).  " }}}
{SECT 0 {PARA 4 "" 0 "" {TEXT -1 12 "Description:" }}{PARA 15 "" 0 "" 
{TEXT 260 99 "FLAT deletes nested calls of the operator T() passing ar
guments to its outer most call. Flat calls " }{HYPERLNK 17 "MLIN" 2 "S
churFkt,MLIN" "" }{TEXT 263 149 " and hence is affected by multilinear
ity. It is only a helper function to get a quick and dirty multilinear
ity for some functions over the integers. " }}}{SECT 0 {PARA 4 "" 0 "
" {TEXT -1 9 "Examples:" }{TEXT 265 0 "" }}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 23 "restart:with(SchurFkt):" }}{PARA 6 "" 1 "" {TEXT -1 
52 "SchurFkt Version 1.0.1 (17 xii 2007) at your service" }}{PARA 6 "
" 1 "" {TEXT -1 58 "(c) 2003-2007 BF&RA, no warranty, no fitness for a
nything!" }}{PARA 6 "" 1 "" {TEXT -1 83 "Increase verbosity by infolev
el[`function`]=val -- use online help > ?Bigebra[help]" }}}{EXCHG 
{PARA 0 "" 0 "" {TEXT -1 20 "Just a few examples:" }}}{EXCHG {PARA 0 "
> " 0 "" {MPLTEXT 1 0 37 "FLAT(T(a,T(b,c)));\nFLAT(T(T(a,b),c));" }}
{PARA 11 "" 1 "" {XPPMATH 20 "6#-%\"TG6%%\"aG\"\"'%\"cG" }}{PARA 11 "
" 1 "" {XPPMATH 20 "6#-%\"TG6%%\"aG\"\"'%\"cG" }}}{EXCHG {PARA 0 "" 0 
"" {TEXT -1 62 "Some more complicated cases showing the internal call \+
of MLIN:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 43 "FLAT(T(a+b,T(c+
d)));\nFLAT(T(2*a,3*T(b,c)));" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#,*-%
\"TG6$%\"aG%\"cG\"\"\"-F%6$F'%\"dGF)-F%6$\"\"'F(F)-F%6$F/F,F)" }}
{PARA 11 "" 1 "" {XPPMATH 20 "6#,$*&\"\"'\"\"\"-%\"TG6%%\"aGF%%\"cGF&F
&" }}}{EXCHG {PARA 0 "" 0 "" {TEXT -1 96 "The second case shows that F
LAT does implements multilinearity over the integers using MLIN.... " 
}}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}}{SECT 0 {PARA 4 "" 
0 "" {TEXT -1 9 "Algorithm" }}{EXCHG {PARA 0 "" 0 "" {TEXT 266 5 "Note
:" }{TEXT -1 200 "  FLAT and MLIN are hacks and not serious code. Don'
t use this code it will most likely be replaced by a better device, fo
r example,  a tensor product using the (patched) define(`&t`,...) faci
lity of " }{HYPERLNK 17 "BIGEBRA" 2 "Bigebra,help" "" }{TEXT -1 375 ".
  \n\nIf FLAT sees an expression of type `+` (sum) then \n       it ma
ps MLIN onto the summands and drops internal occurrences of T().\nelif
 FLAT sees an expression of type `*` (product) then\n      it maps MLI
N onto the term and drops internal occurrences of T() keeping the coef
ficient \nelse \n      FLAT applies MLIN to the argument dropping ther
eby internal occurrences of T()" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 
1 0 0 "" }}}}{SECT 0 {PARA 0 "" 0 "" {TEXT 258 10 "See Also: " }
{HYPERLNK 17 "SchurFkt[MLIN]" 2 "SchurFkt,MLIN" "" }{TEXT 259 2 ", " }
{HYPERLNK 17 "Bigebra[define]" 2 "Bigebra,define" "" }{TEXT -1 3 "   \+
" }}{PARA 0 "" 0 "" {TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT -1 140 "(c) \+
Copyright June 2003 - December 2007, by Bertfried Fauser & Rafal Ablam
owicz, all rights reserved.\nLast modified: December 17, 2007/BF/RA" }
}}{PARA 0 "" 0 "" {TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT -1 0 "" }}}
{MARK "4 0 0" 1 }{VIEWOPTS 1 1 0 1 1 1803 1 1 1 1 }{PAGENUMBERS 0 1 2 
33 1 1 }
