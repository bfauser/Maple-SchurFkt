{VERSION 6 0 "IBM INTEL LINUX" "6.0" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 1 255 0 0 1 0 1 0 0 
1 0 0 0 0 1 }{CSTYLE "2D Math" -1 2 "Times" 0 1 0 0 0 0 0 0 2 0 0 0 0 
0 0 1 }{CSTYLE "Hyperlink" -1 17 "" 0 1 0 128 128 1 0 0 1 0 0 0 0 0 0 
1 }{CSTYLE "2D Output" 2 20 "" 0 1 0 0 255 1 0 0 0 0 0 0 0 0 0 1 }
{CSTYLE "" -1 256 "" 1 12 0 0 0 0 0 2 0 0 0 0 0 0 0 1 }{CSTYLE "" -1 
257 "" 1 12 0 0 0 0 0 2 0 0 0 0 0 0 0 1 }{CSTYLE "" -1 258 "" 1 14 0 
0 0 0 0 1 0 0 0 0 0 0 0 1 }{CSTYLE "" -1 259 "" 0 1 0 0 0 0 0 2 0 0 0 
0 0 0 0 1 }{CSTYLE "" -1 260 "" 0 1 0 0 0 0 0 2 0 0 0 0 0 0 0 1 }
{CSTYLE "" -1 261 "" 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 }{PSTYLE "Normal
" -1 0 1 {CSTYLE "" -1 -1 "" 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 }0 0 0 
-1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "Text Output" -1 2 1 {CSTYLE "" -1 
-1 "Courier" 1 10 0 0 255 1 0 0 0 0 0 1 3 0 3 1 }1 0 0 -1 -1 -1 0 0 0 
0 0 0 -1 0 }{PSTYLE "Heading 1" 0 3 1 {CSTYLE "" -1 -1 "" 1 18 0 0 0 
0 0 1 0 0 0 0 0 0 0 1 }1 0 0 0 6 6 0 0 0 0 0 0 -1 0 }{PSTYLE "Heading \+
2" 3 4 1 {CSTYLE "" -1 -1 "" 1 14 0 0 0 0 0 0 0 0 0 0 0 0 0 1 }0 0 0 
-1 4 4 0 0 0 0 0 0 -1 0 }{PSTYLE "" 2 6 1 {CSTYLE "" -1 -1 "" 0 1 0 0 
0 0 0 0 0 0 0 0 2 0 0 1 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "Map
le Output" 0 11 1 {CSTYLE "" -1 -1 "" 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
}3 3 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 11 12 1 {CSTYLE "" -1 -1 
"" 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 }1 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }
{PSTYLE "Bullet Item" 0 15 1 {CSTYLE "" -1 -1 "" 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 }0 0 0 -1 3 3 0 0 0 0 0 0 15 2 }}
{SECT 0 {SECT 0 {PARA 4 "" 0 "" {TEXT -1 10 "Function: " }{TEXT 256 
81 "SchurFkt[dimSN] - computes the dimension of an sfkt polynom seen a
s S_n character" }}{PARA 4 "" 0 "" {TEXT -1 17 "Calling Sequence:" }}
{PARA 4 "" 0 "" {TEXT 257 24 "n := dimSN(sfktpoly)  \n\n" }{TEXT -1 
11 "Parameters:" }}{PARA 15 "" 0 "" {TEXT -1 36 "sfktpoly    : Schur f
unction polynom" }}{PARA 4 "" 0 "" {TEXT -1 7 "Output:" }}{PARA 15 "" 
0 "" {TEXT -1 13 "n  :  integer" }}{PARA 4 "" 0 "" {TEXT -1 8 "WARNING
:" }}{PARA 0 "" 0 "" {TEXT -1 23 "--not yet well tested--" }}}{SECT 0 
{PARA 4 "" 0 "" {TEXT -1 12 "Description:" }}{PARA 15 "" 0 "" {TEXT 
259 111 "Schur functions have an evaluation, which describes the dimen
sion of S_n modules described be these characters." }}{PARA 15 "" 0 "
" {TEXT 260 266 "We use the classical hook-rule for the characters, th
at is:\n\ndimSN(s[lambda]) =  n! / \\sum_\{hooks at (i,j)\}  h_ij\n\nw
here h_ij is the hook-length, the number of boxes below and to the rig
ht of the box (i,j) in \\lambda plus 1 (in Britisch notation of Young \+
diagrams). " }}}{SECT 0 {PARA 4 "" 0 "" {TEXT -1 9 "Examples:" }}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "restart:with(SchurFkt):" }}
{PARA 6 "" 1 "" {TEXT -1 41 "SchurFkt Version 1.0.2 says 'Good bye...'
" }}{PARA 6 "" 1 "" {TEXT -1 50 "SchurFkt Version 1.0.2 (9 vi 2008) at
 your service" }}{PARA 6 "" 1 "" {TEXT -1 58 "(c) 2003-2008 BF&RA, no \+
warranty, no fitness for anything!" }}{PARA 6 "" 1 "" {TEXT -1 83 "Inc
rease verbosity by infolevel[`function`]=val -- use online help > ?Big
ebra[help]" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 49 "seq(dimSN(s[n
]),n=1..10); ## all one dime modules" }}{PARA 11 "" 1 "" {XPPMATH 20 "
6,\"\"\"F#F#F#F#F#F#F#F#F#" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 
51 "seq(dimSN(s[1$n]),n=1..10); ## all one dime modules" }}{PARA 11 "
" 1 "" {XPPMATH 20 "6,\"\"\"F#F#F#F#F#F#F#F#F#" }}}{EXCHG {PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 103 "dimSN(s[2,1]) = 3!/(3*1*1);\ndimSN(s[3,1,1]) \+
= 5!/(5*2*2*1*1);\ndimSN(s[3,3,3]) = 9!/(5*4*4*3*3*3*2*2*1);" }}{PARA 
11 "" 1 "" {XPPMATH 20 "6#/\"\"#F$" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#
/\"\"'F$" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#/\"#UF$" }}}{EXCHG {PARA 
0 "" 0 "" {TEXT -1 45 "The function dimSN is linear in its argument:" 
}}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 104 "dimSN(a*s[3]+b*s[1,1,1])
;\nfor n from 1 to 10 do\n dimSN(`+`(op(map((x)->s[op(x)],PartNM(n,n))
)));\nend do;" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#,&%\"aG\"\"\"%\"bGF%
" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"\"\"" }}{PARA 11 "" 1 "" 
{XPPMATH 20 "6#\"\"#" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"\"%" }}
{PARA 11 "" 1 "" {XPPMATH 20 "6#\"#5" }}{PARA 11 "" 1 "" {XPPMATH 20 "
6#\"#E" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"#w" }}{PARA 11 "" 1 "" 
{XPPMATH 20 "6#\"$K#" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"$k(" }}
{PARA 11 "" 1 "" {XPPMATH 20 "6#\"%?E" }}{PARA 11 "" 1 "" {XPPMATH 20 
"6#\"%'\\*" }}}{EXCHG {PARA 0 "" 0 "" {TEXT -1 389 "This series is Slo
ane integer database A000085, it counts the dimesnions of S_n represen
tations of homogenous degree, and also the number of (standard) Young-
tableau with n-cells as also the number of self inverse permutations w
ith n-letters, etc...\n\nNote that dimSN always used the appropriate S
_n, so if an input has partitions of different weight, different S_n r
eps are used!! This is " }{TEXT 261 9 "different" }{TEXT -1 12 " from \+
SCHUR!" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 39 "dimSN(s[1]+s[2,2]
+s[3,3,3]+s[4,4,4,4]);" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"&pS#" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 28 "plethS(s[4],s[4]);\ndimSN(%)
;" }}{PARA 12 "" 1 "" {XPPMATH 20 "6#,Z&%\"sG6&\"\"'F'\"\"#F(\"\"\"&F%
6&\"\"*\"\"%F(F)F)&F%6%\"#5\"\"&F)F)*&F(F)&F%6%\"\")F-F-F)F)&F%6&F-F-F
-F-F)&F%6#\"#;F)&F%6&F0F(F(F(F)*&F(F)&F%6%F0F-F(F)F)*&F(F)&F%6$\"#7F-F
)F)&F%6%\"#6\"\"$F(F)&F%6&\"\"(F1FGF)F)&F%6$F5F5F)&F%6%FCF(F(F)&F%6&F5
F-F(F(F)&F%6$\"#9F(F)&F%6$\"#8FGF)&F%6%FFF-F)F)&F%6%F,F-FGF)&F%6&FJFJF
)F)F)&F%6%F,F1F(F)&F%6&F5F1F(F)F)*&F(F)&F%6$F0F'F)F)&F%6%F,F'F)F)*&F(F
)&F%6%F5F'F(F)F)&F%6%FJF'FGF)&F%6%F'F'F-F)&F%6&FJF-F-F)F)&F%6&F'F-F-F(
F)" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"(Dwi#" }}}{EXCHG {PARA 0 "> " 
0 "" {MPLTEXT 1 0 205 "# tested against SCHUR\ndimSN(s[6]),dimSN(s[5,1
]),dimSN(s[4,2]),dimSN(s[4,1,1]),dimSN(s[3,3]),\ndimSN(s[3,2,1]),dimSN
(s[3,1,1,1]),dimSN(s[2,2,2]),dimSN(s[2,2,1,1]),\ndimSN(s[2,1,1,1,1]),d
imSN(s[1,1,1,1,1,1]);" }}{PARA 11 "" 1 "" {XPPMATH 20 "6-\"\"\"\"\"&\"
\"*\"#5F$\"#;F&F$F%F$F#" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "
" }}}}{SECT 0 {PARA 4 "" 0 "" {TEXT -1 15 "Algorithm used:" }}{EXCHG 
{PARA 0 "" 0 "" {TEXT -1 521 "The algorithm used is based on the hook \+
rule. We compute the conjugate partition, and use that with (i,j) in l
ambda, one has (j,i) in the conjugated partition lambda'. The hook len
gth at (i,j) is then given as: h_ij = \\lambda[i]-j + \\lambda'[j]-i +
1 = armlength(i,j) + leglength(i,j) +1. Note that the leg-length at (i
,j) is the arm-length of the conjugate partition at (j,i), the 1 count
s the box in the corder. The dimesnion (hook formula) is then given as
\n\ndimSN(\\lambda) = |\\lambda|! / (Sum_\{(i,j) box in lambda\} h_ij
" }}}{EXCHG {PARA 0 "" 0 "" {TEXT -1 0 "" }}}}{SECT 0 {PARA 0 "" 0 "" 
{TEXT 258 10 "See Also: " }{HYPERLNK 17 "SchurFkt[Overview]" 2 "SchurF
kt,Overview" "" }}{PARA 0 "" 0 "" {TEXT -1 141 "\n(c) Copyright June 2
003 - December 2007, by Bertfried Fauser & Rafal Ablamowicz, all right
s reserved.\nLast modified: December 17, 2007/BF/RA" }}}{PARA 0 "" 0 "
" {TEXT -1 0 "" }}{PARA 0 "" 0 "" {TEXT -1 0 "" }}}{MARK "7" 0 }
{VIEWOPTS 1 1 0 1 1 1803 1 1 1 1 }{PAGENUMBERS 0 1 2 33 1 1 }
